/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zweaver.core;

import com.zweaver.devices.MonitorHandler;
import com.zweaver.dialogue.ContinueCancelDialogue;
import com.zweaver.dialogue.OKDialogue;
import java.awt.Frame;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Window;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;

/**
 *
 * @author zach_
 */
public class AddNewEntry extends javax.swing.JFrame {

    private static int selectedTabIndex;

    public AddNewEntry(Window activeWindow) {
        MonitorHandler.openOnSameMonitor(activeWindow, this);
        initComponents();
    }
    
    // From CoreGUI.java, pass the selected tab when clicking on "Add New Entry" button
    public void setTabIndex(int selectedTabIndex) {
        this.selectedTabIndex = selectedTabIndex;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        symbolsToLettersRatioField = new javax.swing.JTextField();
        useNumbersCheckBox = new javax.swing.JCheckBox();
        useSymbolsCheckBox = new javax.swing.JCheckBox();
        mixCasesCheckBox = new javax.swing.JCheckBox();
        startsWithLetterCheckBox = new javax.swing.JCheckBox();
        lengthField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        profileNameField = new javax.swing.JTextField();
        generatePasswordButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        customPasswordField = new javax.swing.JPasswordField();
        useCustomPasswordCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generate New Password");

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Profile Name:");

        symbolsToLettersRatioField.setBackground(new java.awt.Color(110, 77, 149));
        symbolsToLettersRatioField.setForeground(new java.awt.Color(255, 255, 255));
        symbolsToLettersRatioField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        symbolsToLettersRatioField.setText("0.5");

        useNumbersCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        useNumbersCheckBox.setSelected(true);
        useNumbersCheckBox.setText("Use Numbers");

        useSymbolsCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        useSymbolsCheckBox.setSelected(true);
        useSymbolsCheckBox.setText("Use Symbols");

        mixCasesCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        mixCasesCheckBox.setSelected(true);
        mixCasesCheckBox.setText("Mix Cases");

        startsWithLetterCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        startsWithLetterCheckBox.setSelected(true);
        startsWithLetterCheckBox.setText("Starts with Letter");

        lengthField.setBackground(new java.awt.Color(110, 77, 149));
        lengthField.setForeground(new java.awt.Color(255, 255, 255));
        lengthField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        lengthField.setText("15");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Length:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Symbols to Letters Ratio:");

        profileNameField.setBackground(new java.awt.Color(110, 77, 149));
        profileNameField.setForeground(new java.awt.Color(255, 255, 255));

        generatePasswordButton.setBackground(new java.awt.Color(241, 146, 223));
        generatePasswordButton.setForeground(new java.awt.Color(0, 0, 0));
        generatePasswordButton.setText("Generate");
        generatePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePasswordButtonActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Custom Password:");

        customPasswordField.setBackground(new java.awt.Color(110, 77, 149));
        customPasswordField.setForeground(new java.awt.Color(255, 255, 255));
        customPasswordField.setEnabled(false);

        useCustomPasswordCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        useCustomPasswordCheckBox.setText("Use Custom Password");
        useCustomPasswordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useCustomPasswordCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(profileNameField)
                                    .addComponent(customPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                    .addComponent(symbolsToLettersRatioField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(generatePasswordButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startsWithLetterCheckBox)
                    .addComponent(mixCasesCheckBox)
                    .addComponent(useNumbersCheckBox)
                    .addComponent(useSymbolsCheckBox)
                    .addComponent(useCustomPasswordCheckBox))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(profileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(useCustomPasswordCheckBox))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(customPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(symbolsToLettersRatioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generatePasswordButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(useNumbersCheckBox)
                        .addGap(7, 7, 7)
                        .addComponent(useSymbolsCheckBox)
                        .addGap(6, 6, 6)
                        .addComponent(mixCasesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startsWithLetterCheckBox)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static int newPasswordLength;
    private static float symbolsToLettersRatio;
    
    private void generatePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePasswordButtonActionPerformed
        if (useCustomPasswordCheckBox.isSelected()) {
            if (profileNameField.getText().length() == 0) {
                Window activeWindow = javax.swing.FocusManager.getCurrentManager().getActiveWindow();
                OKDialogue okd = new OKDialogue(activeWindow, "Please provide a profile name.");
            }
            generatePassword(true, customPasswordField.getText());
        } else {
            try {
                newPasswordLength = Integer.parseInt(lengthField.getText());
                symbolsToLettersRatio = Float.parseFloat(symbolsToLettersRatioField.getText());

                if (profileNameField.getText().length() == 0) {
                    Window activeWindow = javax.swing.FocusManager.getCurrentManager().getActiveWindow();
                    OKDialogue okd = new OKDialogue(activeWindow, "Please provide a profile name.");
                } else if (newPasswordLength < 15 && newPasswordLength > 0 && symbolsToLettersRatio >= 0 && symbolsToLettersRatio <= 1) {
                    Window activeWindow = javax.swing.FocusManager.getCurrentManager().getActiveWindow();
                    ContinueCancelDialogue ccd = new ContinueCancelDialogue(activeWindow, "generatePassword", "It's recommended to generate a password of at least 15 characters.");
                } else if (newPasswordLength <= 0) {
                    Window activeWindow = javax.swing.FocusManager.getCurrentManager().getActiveWindow();
                    OKDialogue okd = new OKDialogue(activeWindow, "Please provide a length greater than zero.");
                } else if (symbolsToLettersRatio < 0 || symbolsToLettersRatio > 1) {
                    Window activeWindow = javax.swing.FocusManager.getCurrentManager().getActiveWindow();
                    OKDialogue okd = new OKDialogue(activeWindow, "Please provide symbols to letters ratio between 0 and 1.");
                }
                else {
                    // all criteria met
                    generatePassword(false, "");
                }
            } catch (Exception e) {
                Window activeWindow = javax.swing.FocusManager.getCurrentManager().getActiveWindow();
                OKDialogue okd = new OKDialogue(activeWindow, "Please enter a valid password length or valid symbols to letter ratio!");
            }
        }
    }//GEN-LAST:event_generatePasswordButtonActionPerformed

    private void useCustomPasswordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useCustomPasswordCheckBoxActionPerformed
        if (useCustomPasswordCheckBox.isSelected()) {
            symbolsToLettersRatioField.setEnabled(false);
            useNumbersCheckBox.setEnabled(false);
            useSymbolsCheckBox.setEnabled(false);
            mixCasesCheckBox.setEnabled(false);
            startsWithLetterCheckBox.setEnabled(false);
            lengthField.setEnabled(false);
            customPasswordField.setEnabled(true);
        } else {
            customPasswordField.setText("");
            symbolsToLettersRatioField.setEnabled(true);
            useNumbersCheckBox.setEnabled(true);
            useSymbolsCheckBox.setEnabled(true);
            mixCasesCheckBox.setEnabled(true);
            startsWithLetterCheckBox.setEnabled(true);
            lengthField.setEnabled(true);
            customPasswordField.setEnabled(false);
        }
    }//GEN-LAST:event_useCustomPasswordCheckBoxActionPerformed

    public static void generatePassword(boolean isCustomPassword, String customPassword) {
        // check if profile name is unique
        if (CoreGUI.profilePasswordMap.containsKey(profileNameField.getText())) {
            Window activeWindow = javax.swing.FocusManager.getCurrentManager().getActiveWindow();
            OKDialogue okd = new OKDialogue(activeWindow, "That profile already exists. Please enter different profile name.");
        } else {
            // function called from ContinueCancelDialogue if they press "continue"
            String newPassword;
            
            if (!isCustomPassword) {
                GeneratePassword gp = new GeneratePassword();
                newPassword = gp.generatePassword(useNumbersCheckBox, useSymbolsCheckBox, mixCasesCheckBox, startsWithLetterCheckBox, newPasswordLength, symbolsToLettersRatio, profileNameField.getText());
            } else {
                newPassword = customPassword;
            }
            switch (CoreGUI.applicationTabbedPane.getSelectedIndex()) {
                case 0: // favorites
                    CoreGUI.favoritesListModel.addElement(profileNameField.getText());
                    CoreGUI.profilePasswordMap.put(profileNameField.getText(), newPassword);
                    break;

                case 1: // websites
                    CoreGUI.websitesListModel.addElement(profileNameField.getText());
                    CoreGUI.profilePasswordMap.put(profileNameField.getText(), newPassword);
                    break;

                case 2: // applications
                    CoreGUI.applicationsListModel.addElement(profileNameField.getText());
                    CoreGUI.profilePasswordMap.put(profileNameField.getText(), newPassword);
                    break;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField customPasswordField;
    private javax.swing.JButton generatePasswordButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField lengthField;
    private static javax.swing.JCheckBox mixCasesCheckBox;
    private static javax.swing.JTextField profileNameField;
    private static javax.swing.JCheckBox startsWithLetterCheckBox;
    private javax.swing.JTextField symbolsToLettersRatioField;
    private static javax.swing.JCheckBox useCustomPasswordCheckBox;
    private static javax.swing.JCheckBox useNumbersCheckBox;
    private static javax.swing.JCheckBox useSymbolsCheckBox;
    // End of variables declaration//GEN-END:variables
}
