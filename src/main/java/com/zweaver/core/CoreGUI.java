/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zweaver.core;

import com.zweaver.IO.ConfigHandler;
import com.zweaver.devices.MonitorHandler;
import com.zweaver.dialogue.OKDialogue;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import org.jasypt.util.password.StrongPasswordEncryptor;
import org.jasypt.util.text.AES256TextEncryptor;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author zach_
 */
public class CoreGUI extends javax.swing.JFrame {

    private String enteredUsername;
    private String encryptedUserPassword;
    
    public static DefaultListModel favoritesListModel = new DefaultListModel();
    public static DefaultListModel websitesListModel = new DefaultListModel();
    public static DefaultListModel applicationsListModel = new DefaultListModel();
    
    // a map to store profile names with their passwords
    public static HashMap<String, String> profilePasswordMap = new HashMap<String, String>();
    
    public CoreGUI(Window activeWindow, String enteredUsername, String encryptedPassword) {
        MonitorHandler.openOnSameMonitor(activeWindow, this);
        initComponents();
        passwordField.setEchoChar('\u2022'); // setting consistent black dots
        this.enteredUsername = enteredUsername;
        this.encryptedUserPassword = encryptedPassword;
        
        // Set Ctrl shortcuts on "Config" menu
        KeyStroke importShortcut = KeyStroke.getKeyStroke(KeyEvent.VK_I, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
        KeyStroke exportShortcut = KeyStroke.getKeyStroke(KeyEvent.VK_E, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
        importConfig.setAccelerator(importShortcut);
        exportConfig.setAccelerator(exportShortcut);
        
        // add listener for when we change tabs, need to clear the password field
        applicationTabbedPane.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                passwordField.setText("");
                favoritesListBox.clearSelection();
                websitesListBox.clearSelection();
                applicationsListBox.clearSelection();
            }
        });
        
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                ConfigHandler.ExportConfig(enteredUsername, encryptedUserPassword);
            }
        });
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        applicationTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        favoritesListBox = new javax.swing.JList(favoritesListModel);
        jScrollPane2 = new javax.swing.JScrollPane();
        websitesListBox = new javax.swing.JList(websitesListModel);
        jScrollPane3 = new javax.swing.JScrollPane();
        applicationsListBox = new javax.swing.JList(applicationsListModel);
        passwordField = new javax.swing.JPasswordField();
        passwordLabel = new javax.swing.JLabel();
        addEntryButton = new javax.swing.JButton();
        copyPasswordButton = new javax.swing.JButton();
        deleteEntryButton = new javax.swing.JButton();
        addFavoritesButton = new javax.swing.JButton();
        showPasswordButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        configMenu = new javax.swing.JMenu();
        importConfig = new javax.swing.JMenuItem();
        exportConfig = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Password Manager");
        setName("coreGUI"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        applicationTabbedPane.setBackground(new java.awt.Color(110, 77, 149));
        applicationTabbedPane.setForeground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setName("favoritesScrollPane"); // NOI18N

        favoritesListBox.setBackground(new java.awt.Color(110, 77, 149));
        favoritesListBox.setForeground(new java.awt.Color(255, 255, 255));
        favoritesListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                favoritesListBoxValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(favoritesListBox);

        applicationTabbedPane.addTab("Favorites", jScrollPane1);

        websitesListBox.setBackground(new java.awt.Color(110, 77, 149));
        websitesListBox.setForeground(new java.awt.Color(255, 255, 255));
        websitesListBox.setSelectionForeground(new java.awt.Color(255, 255, 255));
        websitesListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                websitesListBoxValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(websitesListBox);

        applicationTabbedPane.addTab("Websites", jScrollPane2);

        applicationsListBox.setBackground(new java.awt.Color(110, 77, 149));
        applicationsListBox.setForeground(new java.awt.Color(255, 255, 255));
        applicationsListBox.setSelectionForeground(new java.awt.Color(255, 255, 255));
        applicationsListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                applicationsListBoxValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(applicationsListBox);

        applicationTabbedPane.addTab("Applications", jScrollPane3);

        passwordField.setBackground(new java.awt.Color(110, 77, 149));
        passwordField.setForeground(new java.awt.Color(255, 255, 255));

        passwordLabel.setForeground(new java.awt.Color(255, 255, 255));
        passwordLabel.setText("Password:");

        addEntryButton.setBackground(new java.awt.Color(241, 146, 223));
        addEntryButton.setForeground(new java.awt.Color(0, 0, 0));
        addEntryButton.setText("Add New Entry");
        addEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEntryButtonActionPerformed(evt);
            }
        });

        copyPasswordButton.setBackground(new java.awt.Color(241, 146, 223));
        copyPasswordButton.setForeground(new java.awt.Color(0, 0, 0));
        copyPasswordButton.setText("Copy");
        copyPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyPasswordButtonActionPerformed(evt);
            }
        });

        deleteEntryButton.setBackground(new java.awt.Color(241, 146, 223));
        deleteEntryButton.setForeground(new java.awt.Color(0, 0, 0));
        deleteEntryButton.setText("Delete Entry");
        deleteEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEntryButtonActionPerformed(evt);
            }
        });

        addFavoritesButton.setBackground(new java.awt.Color(241, 146, 223));
        addFavoritesButton.setForeground(new java.awt.Color(0, 0, 0));
        addFavoritesButton.setText("Add to Favorites");
        addFavoritesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFavoritesButtonActionPerformed(evt);
            }
        });

        showPasswordButton.setBackground(new java.awt.Color(241, 146, 223));
        showPasswordButton.setForeground(new java.awt.Color(0, 0, 0));
        showPasswordButton.setText("Show");
        showPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordButtonActionPerformed(evt);
            }
        });

        jMenuBar1.setBackground(new java.awt.Color(51, 51, 51));
        jMenuBar1.setForeground(new java.awt.Color(51, 51, 51));

        configMenu.setForeground(new java.awt.Color(255, 255, 255));
        configMenu.setText("Config");

        importConfig.setText("Import Configuration");
        importConfig.setToolTipText("Import a configuration file which has your generated passwords and applications/favorites. Used when you use multiple computers.");
        importConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importConfigActionPerformed(evt);
            }
        });
        configMenu.add(importConfig);

        exportConfig.setText("Export Configuration");
        exportConfig.setToolTipText("Export your configuration to use on another system.");
        exportConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportConfigActionPerformed(evt);
            }
        });
        configMenu.add(exportConfig);

        jMenuBar1.add(configMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(applicationTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addEntryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteEntryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addFavoritesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(copyPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(copyPasswordButton)
                            .addComponent(showPasswordButton))
                        .addGap(21, 21, 21)
                        .addComponent(addEntryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteEntryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addFavoritesButton))
                    .addComponent(applicationTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEntryButtonActionPerformed
        // Get selected tab and create new entry object
        int selectedTabIndex = applicationTabbedPane.getSelectedIndex();
        Window activeWindow = javax.swing.FocusManager.getCurrentManager().getActiveWindow();
        AddNewEntry newEntry = new AddNewEntry(activeWindow);
        newEntry.setTabIndex(selectedTabIndex);
    }//GEN-LAST:event_addEntryButtonActionPerformed

    private void copyPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyPasswordButtonActionPerformed
        StringSelection stringSelection = new StringSelection(passwordField.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
        Window activeWindow = javax.swing.FocusManager.getCurrentManager().getActiveWindow();
        OKDialogue okd = new OKDialogue(activeWindow, "Password copied to clipboard.");
    }//GEN-LAST:event_copyPasswordButtonActionPerformed

    private void deleteEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEntryButtonActionPerformed
        int selectedTabIndex = applicationTabbedPane.getSelectedIndex();
        switch (selectedTabIndex) {
            case 0: // favorites
                if (!favoritesListBox.isSelectionEmpty()) {
                    profilePasswordMap.remove(favoritesListBox.getSelectedValue());
                    favoritesListModel.remove(favoritesListBox.getSelectedIndex());
                    passwordField.setText("");
                }
                break;
            
            case 1: // websites
                if (!websitesListBox.isSelectionEmpty()) {
                    profilePasswordMap.remove(websitesListBox.getSelectedValue());
                    websitesListModel.remove(websitesListBox.getSelectedIndex());
                    passwordField.setText("");
                }
                break;
                
            case 2: // applications
                if (!applicationsListBox.isSelectionEmpty()) {
                    profilePasswordMap.remove(applicationsListBox.getSelectedValue());
                    applicationsListModel.remove(applicationsListBox.getSelectedIndex());
                    passwordField.setText("");
                }
                break;
        }
    }//GEN-LAST:event_deleteEntryButtonActionPerformed

    private void addFavoritesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFavoritesButtonActionPerformed
        int selectedTabIndex = applicationTabbedPane.getSelectedIndex();
        switch (selectedTabIndex) {
            case 1: // websites
                favoritesListModel.addElement(websitesListBox.getSelectedValue());
                websitesListModel.remove(websitesListBox.getSelectedIndex());
                break;
                
            case 2: // applications
                favoritesListModel.addElement(applicationsListBox.getSelectedValue());
                applicationsListModel.remove(applicationsListBox.getSelectedIndex());
                break;
        }
    }//GEN-LAST:event_addFavoritesButtonActionPerformed

    private boolean isShowing = false;
    private void showPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordButtonActionPerformed
        if (!isShowing) {
            passwordField.setEchoChar((char)0);
            showPasswordButton.setText("Hide");
            isShowing = true;
        } else {
            passwordField.setEchoChar('\u2022');
            showPasswordButton.setText("Show");
            isShowing = false;
        }
    }//GEN-LAST:event_showPasswordButtonActionPerformed

    private void favoritesListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_favoritesListBoxValueChanged
        // get selection and populate password field
        if (!favoritesListBox.isSelectionEmpty()) {
            passwordField.setText(profilePasswordMap.get(favoritesListBox.getSelectedValue()));
        }
    }//GEN-LAST:event_favoritesListBoxValueChanged

    private void websitesListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_websitesListBoxValueChanged
        // get selection and populate password field
        if (!websitesListBox.isSelectionEmpty()) {
            passwordField.setText(profilePasswordMap.get(websitesListBox.getSelectedValue()));
        }
    }//GEN-LAST:event_websitesListBoxValueChanged

    private void applicationsListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_applicationsListBoxValueChanged
        // get selection and populate password field
        if (!applicationsListBox.isSelectionEmpty()) {
            passwordField.setText(profilePasswordMap.get(applicationsListBox.getSelectedValue()));
        }
    }//GEN-LAST:event_applicationsListBoxValueChanged

    private void exportConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportConfigActionPerformed
      ConfigHandler.ExportConfig(this.enteredUsername, this.encryptedUserPassword);
    }//GEN-LAST:event_exportConfigActionPerformed

    public void importConfigOnLogin() {
        ConfigHandler.ImportConfig(this.enteredUsername);
    }
    private void importConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importConfigActionPerformed
        ConfigHandler.ImportConfig(this.enteredUsername);
    }//GEN-LAST:event_importConfigActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // autosave configuration when closing window
        ConfigHandler.ExportConfig(this.enteredUsername, this.encryptedUserPassword);
    }//GEN-LAST:event_formWindowClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEntryButton;
    private javax.swing.JButton addFavoritesButton;
    public static javax.swing.JTabbedPane applicationTabbedPane;
    public static javax.swing.JList<String> applicationsListBox;
    private javax.swing.JMenu configMenu;
    private javax.swing.JButton copyPasswordButton;
    private javax.swing.JButton deleteEntryButton;
    private javax.swing.JMenuItem exportConfig;
    public static javax.swing.JList<String> favoritesListBox;
    private javax.swing.JMenuItem importConfig;
    private javax.swing.JMenuBar jMenuBar1;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton showPasswordButton;
    public static javax.swing.JList<String> websitesListBox;
    // End of variables declaration//GEN-END:variables
}
